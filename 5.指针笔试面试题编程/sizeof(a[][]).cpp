#include<stdio.h>
#include<stdlib.h> 
//总结:
//数组名的意义:
//1. sizeof(数组名)，这里的数组名表示整个数组，计算的是整个数组的大小。
//2.&数组名，这里的数组名表示整个数组，取出的是整个数组的地址。
//3.除此之外所有的数组名都表示首元素的地址。
int main()
{
	int a[3][4] = {0};
	printf( "%p\n", &a[0][0]); //第一行地址 
	printf( "%p\n", *a);       //第一行地址  
	printf( "%p\n", a + 1);    //第二行地址 
	printf( "%p\n", &a[0] + 1);//第二行地址 
	printf( "%p\n", &a[1]);	   //第二行地址
	printf( "%p\n", a[1]);	   //第二行地址
	printf( "%p\n", a[3]);		//sizeof()只看类型计算大小 
	
	printf( "%d\n", sizeof(a)); //48
	printf( "%d \n", sizeof(a[0][0]));//4
	printf("%d\n", sizeof(a[0]));//16 a[0]相当于第一行做为一维数组的数组名，
	///sizeof(arr[0])把数组名单独放在sizeof()内，计算的是第一行的大小
	printf("%d\n", sizeof(a[0] + 1));
	//4 - a[0]是第一行的数组名，数组名此时是首元素的地址，其实就是第一行第一个元素的地址
	//所以a[0]+1就是第一行第二个元素的地址-地址大小是4/8个字节 
	printf( "%d\n", sizeof(*(a[0] + 1)));//4，第一行第二个元素  大小是四个字节 
	printf("%d\n",(*(a[0] + 1))); //0 
	
	printf( "%d \n", sizeof(a + 1));//4 
	//把二维数组看成一维数组时，二维数组首元素是它的第一行，a就是首元素（第一行）的地址
	//a+1就是就是第二行的地址 
	printf("%d\n", sizeof(*(a + 1)));//16，sizeof(a[1])等价，  解引用后是第二行的大小，单位是字节 
	printf( "%d \n", sizeof(&a[0] +1));//4，第二行的地址 
	printf( "%d\n", sizeof(*(&a[0] +1)));//16，第二行的大小，单位是字节 
	printf( "%d \n", sizeof(*a) );// 16，a是首元素的地址-第一行的地址，*a就是就是第一行，
	//sizeof(*a)就是计算第一行的大小 
	printf( "%d \n", sizeof(a[3]));//16 
		
	return 0;
	
}
